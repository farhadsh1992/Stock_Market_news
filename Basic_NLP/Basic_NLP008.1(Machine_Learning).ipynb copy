{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:100px;text-align:center;border: 4px solid black;background-color:#E6BF00;color:white\">\n",
    "\n",
    "<header style=\"width:100%;height:100px;\">\n",
    "  <h1><b> Session 003</b></h1>\n",
    "    <h4> Basic Natural language processing </h4>\n",
    "</header>\n",
    "\n",
    "<div> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='border: 4px solid #E6BF00;padding:9px;'>\n",
    "\n",
    "By: Farhad Shadmand \n",
    "    \n",
    "https://github.com/farhadsh1992\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border: 4px solid #3550B7;background-color:#BFE6FF;color:black;border-radius: 5px;padding:7px\">\n",
    "  <strong> Refrence: </strong><br>\n",
    "\n",
    "\n",
    "\n",
    "http://nadbordrozd.github.io/blog/2016/05/20/text-classification-with-word2vec/\n",
    "  \n",
    "https://towardsdatascience.com/using-scikit-learn-to-find-bullies-c47a1045d92f\n",
    "    \n",
    "https://www.kaggle.com/eswarbabu88/toxic-comment-glove-logistic-regression\n",
    "    \n",
    "https://www.kaggle.com/stacykurnikova/using-glove-embedding\n",
    "    \n",
    "https://www.kaggle.com/ankitswarnkar/word-embedding-using-glove-vector\n",
    "    \n",
    "https://textminingonline.com/getting-started-with-word2vec-and-glove-in-python\n",
    "    \n",
    "https://markhneedham.com/blog/2018/05/19/interpreting-word2vec-glove-embeddings-sklearn-neo4j-graph-algorithms/\n",
    "    \n",
    "http://nadbordrozd.github.io/blog/2016/05/20/text-classification-with-word2vec/\n",
    "    \n",
    "https://radimrehurek.com/gensim/sklearn_api/w2vmodel.html\n",
    "    \n",
    "https://www.kaggle.com/reiinakano/basic-nlp-bag-of-words-tf-idf-word2vec-lstm\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1>  Result of ML <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>cross_validation_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>XGBRegressor</td>\n",
       "      <td>-0.032793</td>\n",
       "      <td>0.471631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GaussianNB</td>\n",
       "      <td>0.495984</td>\n",
       "      <td>0.492908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KNeighborsClassifier</td>\n",
       "      <td>0.503102</td>\n",
       "      <td>0.471631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.509761</td>\n",
       "      <td>0.475177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LinearSVC</td>\n",
       "      <td>0.513314</td>\n",
       "      <td>0.478723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ExtraTreesClassifier</td>\n",
       "      <td>0.514203</td>\n",
       "      <td>0.475177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DecisionTreeClassifier</td>\n",
       "      <td>0.516409</td>\n",
       "      <td>0.498227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    title  cross_validation_train  accuracy_test\n",
       "2            XGBRegressor               -0.032793       0.471631\n",
       "4              GaussianNB                0.495984       0.492908\n",
       "3    KNeighborsClassifier                0.503102       0.471631\n",
       "0      LogisticRegression                0.509761       0.475177\n",
       "6               LinearSVC                0.513314       0.478723\n",
       "1    ExtraTreesClassifier                0.514203       0.475177\n",
       "5  DecisionTreeClassifier                0.516409       0.498227"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For dimonation = 100\n",
    "df_re = pd.DataFrame(result)\n",
    "df_re.sort_values('cross_validation_train').head(len(df_re))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>cross_validation_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>XGBRegressor</td>\n",
       "      <td>-0.033674</td>\n",
       "      <td>0.484043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KNeighborsClassifier</td>\n",
       "      <td>0.502654</td>\n",
       "      <td>0.484043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GaussianNB</td>\n",
       "      <td>0.503102</td>\n",
       "      <td>0.508865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.503109</td>\n",
       "      <td>0.501773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LinearSVC</td>\n",
       "      <td>0.505328</td>\n",
       "      <td>0.491135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DecisionTreeClassifier</td>\n",
       "      <td>0.513318</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ExtraTreesClassifier</td>\n",
       "      <td>0.520854</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    title  cross_validation_train  accuracy_test\n",
       "2            XGBRegressor               -0.033674       0.484043\n",
       "3    KNeighborsClassifier                0.502654       0.484043\n",
       "4              GaussianNB                0.503102       0.508865\n",
       "0      LogisticRegression                0.503109       0.501773\n",
       "6               LinearSVC                0.505328       0.491135\n",
       "5  DecisionTreeClassifier                0.513318       0.500000\n",
       "1    ExtraTreesClassifier                0.520854       0.500000"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For dimonation = 25 \n",
    "df_re2 = pd.DataFrame(result)\n",
    "df_re2.sort_values('cross_validation_train').head(len(df_re))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>cross_validation_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>XGBRegressor</td>\n",
       "      <td>-0.012372</td>\n",
       "      <td>0.498227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.487987</td>\n",
       "      <td>0.519504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LinearSVC</td>\n",
       "      <td>0.490655</td>\n",
       "      <td>0.510638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GaussianNB</td>\n",
       "      <td>0.499987</td>\n",
       "      <td>0.508865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DecisionTreeClassifier</td>\n",
       "      <td>0.509322</td>\n",
       "      <td>0.492908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ExtraTreesClassifier</td>\n",
       "      <td>0.519085</td>\n",
       "      <td>0.484043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KNeighborsClassifier</td>\n",
       "      <td>0.535065</td>\n",
       "      <td>0.498227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    title  cross_validation_train  accuracy_test\n",
       "2            XGBRegressor               -0.012372       0.498227\n",
       "0      LogisticRegression                0.487987       0.519504\n",
       "6               LinearSVC                0.490655       0.510638\n",
       "4              GaussianNB                0.499987       0.508865\n",
       "5  DecisionTreeClassifier                0.509322       0.492908\n",
       "1    ExtraTreesClassifier                0.519085       0.484043\n",
       "3    KNeighborsClassifier                0.535065       0.498227"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For dimonation = 10\n",
    "df_re3 = pd.DataFrame(result)\n",
    "df_re3.sort_values('cross_validation_train').head(len(df_re))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>cross_validation_train</th>\n",
       "      <th>accuracy_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>XGBRegressor</td>\n",
       "      <td>-0.025363</td>\n",
       "      <td>0.487589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GaussianNB</td>\n",
       "      <td>0.501322</td>\n",
       "      <td>0.507092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DecisionTreeClassifier</td>\n",
       "      <td>0.504437</td>\n",
       "      <td>0.521277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>0.507525</td>\n",
       "      <td>0.510638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LinearSVC</td>\n",
       "      <td>0.510633</td>\n",
       "      <td>0.510638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ExtraTreesClassifier</td>\n",
       "      <td>0.518642</td>\n",
       "      <td>0.482270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>KNeighborsClassifier</td>\n",
       "      <td>0.522646</td>\n",
       "      <td>0.487589</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    title  cross_validation_train  accuracy_test\n",
       "2            XGBRegressor               -0.025363       0.487589\n",
       "4              GaussianNB                0.501322       0.507092\n",
       "5  DecisionTreeClassifier                0.504437       0.521277\n",
       "0      LogisticRegression                0.507525       0.510638\n",
       "6               LinearSVC                0.510633       0.510638\n",
       "1    ExtraTreesClassifier                0.518642       0.482270\n",
       "3    KNeighborsClassifier                0.522646       0.487589"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For dimonation = 5\n",
    "df_re4 = pd.DataFrame(result)\n",
    "df_re4.sort_values('cross_validation_train').head(len(df_re))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1>  Load data <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2816 entries, 0 to 2815\n",
      "Data columns (total 5 columns):\n",
      "created_at          2816 non-null object\n",
      "clean_text          2816 non-null object\n",
      "Price_label(0,1)    2816 non-null int64\n",
      "text                2816 non-null object\n",
      "label               2816 non-null int64\n",
      "dtypes: int64(2), object(3)\n",
      "memory usage: 110.1+ KB\n"
     ]
    }
   ],
   "source": [
    "#data_path = '/Users/apple/Documents/Programming/python/Project/data/Clean_tweets/2Tesla_label_from_2010-06-29_to_2019-02-26_2019227.csv'\n",
    "data_path = '/Users/apple/Documents/Programming/python/Project/data/tweets/2Tesla_label_from_2010-06-29_to_2019-02-26_2019227.csv'\n",
    "df_data = pd.read_csv(data_path)\n",
    "#df_data = df_data.dropna().reset_index()\n",
    "def xx(x):\n",
    "    if x==-1:\n",
    "        return 0\n",
    "    else:\n",
    "        return x\n",
    "#df_data['Price_label(0,1)'] = df_data['Price_label(0,1)'].apply(xx)\n",
    "#df_data['text'] = df_data['clean_text'].apply(lambda x: re.sub('-PRON- ','',x))\n",
    "#df_data['text'] = df_data['clean_text'].apply(lambda x: re.sub('-PRON-','',x))\n",
    "#df_data = df_data.reindex()\n",
    "df_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_data['label'] = df_data['Price_label(0,1)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\" \n",
    "number = []\n",
    "for num,text in enumerate(df_data.text):\n",
    "    words = text.split(' ')\n",
    "    if len(words)<=1:\n",
    "        df_data.drop([num],axis=0)\n",
    "        number.append(num)\n",
    "df_data = df_data.reset_index()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "%%time\n",
    "for num,text in enumerate(df_data.text):\n",
    "    words = text.split(' ')\n",
    "    row = []\n",
    "    for w in words:\n",
    "        if len(w)>1:\n",
    "            row.append(w)\n",
    "    df_data.text[num] = ' '.join(row)\n",
    "#df_data = df_data.reset_index()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>created_at</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>Price_label(0,1)</th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-06-29</td>\n",
       "      <td>trump tusk tesla</td>\n",
       "      <td>1</td>\n",
       "      <td>trump tusk tesla</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-06-29</td>\n",
       "      <td>tesla elon musk may trouble e c want -PRON- ho...</td>\n",
       "      <td>1</td>\n",
       "      <td>tesla elon musk may trouble want hold contempt...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-07-01</td>\n",
       "      <td>year people find tesla teleportation achieve y...</td>\n",
       "      <td>0</td>\n",
       "      <td>year people find tesla teleportation achieve y...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-07-02</td>\n",
       "      <td>look mx efficient compare audi jaguar</td>\n",
       "      <td>0</td>\n",
       "      <td>look mx efficient compare audi jaguar</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-07-14</td>\n",
       "      <td>tesla musk risk contempt charge sec argue twee...</td>\n",
       "      <td>1</td>\n",
       "      <td>tesla musk risk contempt charge sec argue twee...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   created_at                                         clean_text  \\\n",
       "0  2010-06-29                                   trump tusk tesla   \n",
       "1  2010-06-29  tesla elon musk may trouble e c want -PRON- ho...   \n",
       "2  2010-07-01  year people find tesla teleportation achieve y...   \n",
       "3  2010-07-02              look mx efficient compare audi jaguar   \n",
       "4  2010-07-14  tesla musk risk contempt charge sec argue twee...   \n",
       "\n",
       "   Price_label(0,1)                                               text  label  \n",
       "0                 1                                   trump tusk tesla      1  \n",
       "1                 1  tesla elon musk may trouble want hold contempt...      1  \n",
       "2                 0  year people find tesla teleportation achieve y...      0  \n",
       "3                 0              look mx efficient compare audi jaguar      0  \n",
       "4                 1  tesla musk risk contempt charge sec argue twee...      1  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['created_at', 'clean_text', 'Price_label(0,1)', 'text', 'label'], dtype='object')"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "level_0                                                            44\n",
       "index                                                              51\n",
       "created_at                                                 2010-08-17\n",
       "clean_text          ein komplette design refresh f r tesla w schon...\n",
       "Price_label(0,1)                                                    1\n",
       "text                ein komplette design refresh f r tesla w schon...\n",
       "label                                                               1\n",
       "Name: 44, dtype: object"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data.iloc[44]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>level_0</th>\n",
       "      <th>index</th>\n",
       "      <th>Price_label(0,1)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1928891</td>\n",
       "      <td>2190599</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2034629</td>\n",
       "      <td>2316672</td>\n",
       "      <td>1403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       level_0    index  Price_label(0,1)\n",
       "label                                    \n",
       "0      1928891  2190599                 0\n",
       "1      2034629  2316672              1403"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data.groupby('label').sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = {}\n",
    "result['title'] = []\n",
    "result['cross_validation_train'] = []\n",
    "result['accuracy_test'] = []\n",
    "\n",
    "def result_maker(title,scoe,acc):\n",
    "    result['title'].append(title)\n",
    "    result['cross_validation_train'].append(scoe.mean())\n",
    "    result['accuracy_test'].append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> Embedding_TFIDF <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "import warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lenght of data: 2816\n",
      "Lenght of data: 1645 1645\n",
      "CPU times: user 192 ms, sys: 35.9 ms, total: 228 ms\n",
      "Wall time: 292 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "warnings.filterwarnings('ignore')\n",
    "vectorizer_count_vector = CountVectorizer(min_df=5, max_df=0.9,ngram_range=(1,2))\n",
    "data_vectorized_vc = vectorizer_count_vector.fit_transform(df_data['text'])\n",
    "\n",
    "Tfidf = TfidfTransformer()\n",
    "data_vectorized = Tfidf.fit_transform(data_vectorized_vc)  \n",
    "\n",
    "print('Lenght of data:',len(data_vectorized.toarray()))\n",
    "print('Lenght of data:',len(data_vectorized.toarray()[12]),len(data_vectorized.toarray()[22]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lenght of data: 2816\n",
      "Lenght of data: 18184 18184\n"
     ]
    }
   ],
   "source": [
    "tfidf_vect= TfidfVectorizer(  use_idf=True, smooth_idf=True, sublinear_tf=False, ngram_range=(1,2))\n",
    "data_vectorized = tfidf_vect.fit_transform(df_data['text'])\n",
    "\n",
    "print('Lenght of data:',len(data_vectorized.toarray()))\n",
    "print('Lenght of data:',len(data_vectorized.toarray()[12]),len(data_vectorized.toarray()[22]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "#help(TfidfVectorizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 0. ... 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(data_vectorized.toarray()[22])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check the Sparsicity: Sparsicity is nothing but the percentage of non-zero datapoints in the document-word matrix,\n",
    "data_dense = data_vectorized.todense() # Materialize the sparse data\n",
    "print(\"Sparsicity: \", ((data_dense > 0).sum()/data_dense.size)*100, \"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> Dimensional_Reduction <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_ = PCA(n_components=5)\n",
    "viz_data = pca_.fit_transform(data_vectorized.toarray()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lenght of data: 2816\n",
      "Lenght of data: 5 5\n"
     ]
    }
   ],
   "source": [
    "print('Lenght of data:',len(viz_data))\n",
    "print('Lenght of data:',len(viz_data[12]),len(viz_data[22]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.06062766, -0.05719918, -0.0771719 ,  0.38877366,  0.15564381])"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "viz_data[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> model_selection <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = viz_data \n",
    "y = [i for i in df_data['label']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 0, 1, 1, 1, 1, 1, 1, 0]\n",
      "[ 0.01888005 -0.00330851 -0.05482582 -0.00093197 -0.0163088 ]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test  = train_test_split(x,y ,test_size=0.20, random_state =32, shuffle=True)\n",
    "\n",
    "print(y_train[1:10])\n",
    "print(x_train[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> LogisticRegression <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score,confusion_matrix, log_loss, f1_score,mean_squared_error\n",
    "from farhad_DL.utility import plot_confusion_matrix \n",
    "from sklearn.model_selection import train_test_split, cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.5075250061591525\n",
      "accuracy: 0.5106382978723404\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "classifier = LogisticRegression(solver='sag')\n",
    "\n",
    "scoe = cross_val_score(classifier,x_train, y_train , cv=5);\n",
    "print('accuracy:',scoe.mean())\n",
    "\n",
    "\n",
    "classifier.fit(x_train, y_train)\n",
    "y_pred = classifier.predict(x_test)\n",
    "\n",
    "acc = accuracy_score(y_test,y_pred)\n",
    "print('accuracy:',acc)\n",
    "\n",
    "cm = confusion_matrix(y_test,y_pred , labels=[0,1])\n",
    "plot_confusion_matrix(cm, names=['bad','good'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = 'LogisticRegression'\n",
    "result_maker(title,scoe,acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> ExtraTreesClassifier <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.5186420300566642\n",
      "accuracy: 0.48226950354609927\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ETC = ExtraTreesClassifier(n_estimators=200)\n",
    "\n",
    "scoe = cross_val_score(ETC,x_train, y_train , cv=5);\n",
    "print('accuracy:',scoe.mean())\n",
    "\n",
    "\n",
    "ETC.fit(x_train, y_train)\n",
    "y_pred = ETC.predict(x_test)\n",
    "\n",
    "acc = accuracy_score(y_test,y_pred)\n",
    "print('accuracy:',acc)\n",
    "\n",
    "cm = confusion_matrix(y_test,y_pred , labels=[0,1])\n",
    "plot_confusion_matrix(cm, names=['bad','good'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = 'ExtraTreesClassifier'\n",
    "result_maker(title,scoe,acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> XGBRegressor <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: -0.02536328941103716\n",
      "accuracy: 0.4875886524822695\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost import XGBRegressor\n",
    "\n",
    "model_xgb_Regressor = XGBRegressor(n_estimators=60,early_stopping_rounds='auto',verbose=True,random_state=10)\n",
    "\n",
    "scoe = cross_val_score(model_xgb_Regressor,x_train, y_train , cv=5);\n",
    "print('accuracy:',scoe.mean())\n",
    "\n",
    "model_xgb_Regressor.fit(x_train, y_train)\n",
    "y_pred = model_xgb_Regressor.predict(x_test)\n",
    "for num in range(len(y_pred)):\n",
    "    if y_pred[num]>0.50:\n",
    "        y_pred[num]=1\n",
    "    else:\n",
    "         y_pred[num]=0\n",
    "            \n",
    "\n",
    "acc = accuracy_score(y_test,y_pred)\n",
    "print('accuracy:',acc)\n",
    "\n",
    "cm = confusion_matrix(y_test,y_pred , labels=[0,1])\n",
    "plot_confusion_matrix(cm, names=['bad','good'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = 'XGBRegressor'\n",
    "result_maker(title,scoe,acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> KNeighborsClassifier <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.5226459719142647\n",
      "accuracy: 0.4875886524822695\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "kmean = KNeighborsClassifier()\n",
    "scoe = cross_val_score(kmean, x_train, y_train , cv=5);\n",
    "print('accuracy:',scoe.mean())\n",
    "\n",
    "kmean.fit(x_train, y_train)\n",
    "y_pred = model_xgb_Regressor.predict(x_test)\n",
    "for num in range(len(y_pred)):\n",
    "    if y_pred[num]>0.50:\n",
    "        y_pred[num]=1\n",
    "    else:\n",
    "         y_pred[num]=0\n",
    "            \n",
    "acc = accuracy_score(y_test,y_pred)\n",
    "print('accuracy:',acc)\n",
    "\n",
    "cm = confusion_matrix(y_test,y_pred , labels=[0,1])\n",
    "plot_confusion_matrix(cm, names=['bad','good'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = 'KNeighborsClassifier'\n",
    "result_maker(title,scoe,acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> GaussianNB <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.5013215077605322\n",
      "accuracy: 0.5070921985815603\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "GNB = GaussianNB()\n",
    "GNB.fit(x_train, y_train)\n",
    "scoe = cross_val_score(GNB, x_train, y_train , cv=5);\n",
    "print('accuracy:',scoe.mean())\n",
    "\n",
    "GNB.fit(x_train, y_train)\n",
    "y_pred = GNB.predict(x_test)\n",
    "for num in range(len(y_pred)):\n",
    "    if y_pred[num]>0.50:\n",
    "        y_pred[num]=1\n",
    "    else:\n",
    "         y_pred[num]=0\n",
    "            \n",
    "acc = accuracy_score(y_test,y_pred)\n",
    "print('accuracy:',acc)\n",
    "\n",
    "cm = confusion_matrix(y_test,y_pred , labels=[0,1])\n",
    "plot_confusion_matrix(cm, names=['bad','good'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = ' GaussianNB'\n",
    "result_maker(title,scoe,acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> DecisionTreeClassifier <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.5044365607292437\n",
      "accuracy: 0.5212765957446809\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "model_DecisionTree = DecisionTreeClassifier(max_leaf_nodes=300)\n",
    "scoe = cross_val_score(model_DecisionTree, x_train, y_train , cv=5);\n",
    "print('accuracy:',scoe.mean())\n",
    "\n",
    "model_DecisionTree.fit(x_train, y_train)\n",
    "y_pred = model_DecisionTree.predict(x_test)\n",
    "for num in range(len(y_pred)):\n",
    "    if y_pred[num]>0.50:\n",
    "        y_pred[num]=1\n",
    "    else:\n",
    "         y_pred[num]=0\n",
    "            \n",
    "acc = accuracy_score(y_test,y_pred)\n",
    "print('accuracy:',acc)\n",
    "\n",
    "cm = confusion_matrix(y_test,y_pred , labels=[0,1])\n",
    "plot_confusion_matrix(cm, names=['bad','good'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = 'DecisionTreeClassifier'\n",
    "result_maker(title,scoe,acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"width:100%;height:70px;border: 4px solid black;background-color:#E6BF00;color:white;text-align:center;border-radius: 25px;padding:3px\">\n",
    "    <h1> LinearSVC <h1>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.5106331608770633\n",
      "accuracy: 0.5106382978723404\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.svm import LinearSVC\n",
    "LSVC = LinearSVC()\n",
    "\n",
    "scoe = cross_val_score(LSVC, x_train, y_train , cv=5);\n",
    "print('accuracy:',scoe.mean())\n",
    "\n",
    "LSVC.fit(x_train, y_train)\n",
    "y_pred = LSVC.predict(x_test)\n",
    "for num in range(len(y_pred)):\n",
    "    if y_pred[num]>0.50:\n",
    "        y_pred[num]=1\n",
    "    else:\n",
    "         y_pred[num]=0\n",
    "            \n",
    "acc = accuracy_score(y_test,y_pred)\n",
    "print('accuracy:',acc)\n",
    "\n",
    "cm = confusion_matrix(y_test,y_pred , labels=[0,1])\n",
    "plot_confusion_matrix(cm, names=['bad','good'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "title = ' LinearSVC'\n",
    "result_maker(title,scoe,acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
